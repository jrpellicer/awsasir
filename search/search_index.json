{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Pr\u00e1cticas en AWS para ASIR","text":"<p>Pr\u00e1cticas de contenidos del CFGS de ASIR para realizar en el portal AWS.</p> <p>Iniciar ahora Ver en GitHub</p> <p>El objetivo de estas pr\u00e1cticas es replicar en AWS algunas de las infraestructuras on-premise estudiadas durante el curso.</p> <p>Las primeras pr\u00e1cticas son guiadas, indicando paso a paso el proceso de creaci\u00f3n de cada recurso, dejando la \u00faltima como proyecto integrador que contine contenidos de redes, sistemas operativos, bases de datos, hardware y lenguaje de marcas, pudi\u00e9ndose ampliar en las \u00e1reas de bases de datos y dise\u00f1o web.</p>"},{"location":"faqredes.html","title":"FAQ Redes Virtuales","text":""},{"location":"faqredes.html#virtual-private-cloud","title":"Virtual Private Cloud","text":""},{"location":"faqredes.html#que-es-una-vpc","title":"\u00bfQu\u00e9 es una VPC?","text":"<p>Una VPC (Virtual Private Cloud) en AWS es una red virtual privada que te permite aislar y administrar tus recursos en la nube de forma segura y controlada. Es el entorno l\u00f3gico donde se implementan recursos como instancias de EC2, bases de datos RDS, y otros servicios.</p>"},{"location":"faqredes.html#que-elementos-principales-tiene-una-vpc","title":"\u00bfQu\u00e9 elementos principales tiene una VPC?","text":"<p>1.- CIDR Block (Classless Inter-Domain Routing)</p> <ul> <li>Es el rango de direcciones IP que define tu red privada. Ejemplo: 10.0.0.0/16.</li> <li>Te permite dividir la VPC en subredes.</li> </ul> <p>2.- Subredes</p> <ul> <li>Divisiones dentro de la VPC que separan la red en diferentes segmentos l\u00f3gicos.</li> <li>Hay dos tipos:<ul> <li>Subredes p\u00fablicas: conectadas a Internet.</li> <li>Subredes privadas: aisladas de Internet, usadas para recursos internos.</li> </ul> </li> </ul> <p>3.- Internet Gateway (IGW)</p> <ul> <li>Permite que las instancias en subredes p\u00fablicas tengan acceso a Internet.</li> <li>Se asocia a una VPC y a las rutas de la tabla de ruteo.</li> </ul> <p>4.- NAT Gateway</p> <ul> <li>Permite que las instancias en subredes privadas puedan acceder a Internet de forma segura para tareas salientes (como actualizaciones de software).</li> <li>Las conexiones entrantes no est\u00e1n permitidas.</li> </ul> <p>5.- Tablas de enrutamiento</p> <ul> <li>Determinan c\u00f3mo se enrutan los paquetes de datos dentro de la VPC, entre subredes y hacia fuera de la VPC (Internet o redes privadas).</li> <li>Cada subred est\u00e1 asociada a una tabla de enrutamiento.</li> </ul> <p>6.- Peering de VPC</p> <ul> <li>Permite conectar dos VPCs para que los recursos de una puedan comunicarse con los de la otra.</li> </ul> <p>7.- Endpoint de VPC</p> <ul> <li>Permite acceder a servicios de AWS como S3 o DynamoDB desde la VPC sin necesidad de usar un Internet Gateway o NAT.</li> </ul> <p>8.- Security Groups</p> <ul> <li>Act\u00faan como firewalls virtuales para las instancias EC2, controlando el tr\u00e1fico entrante y saliente.</li> </ul> <p>9.- Network ACLs (Access Control Lists)</p> <ul> <li>Controlan el tr\u00e1fico a nivel de subred. Se usan junto con los Security Groups para a\u00f1adir una capa adicional de seguridad.</li> </ul> <p>10.- Elastic IP</p> <ul> <li>Una direcci\u00f3n IP est\u00e1tica p\u00fablica que puedes asignar a recursos dentro de tu VPC.</li> </ul>"},{"location":"faqredes.html#cuales-son-los-pasos-en-la-configuracion-de-la-vpc","title":"\u00bfCu\u00e1les son los pasos en la configuraci\u00f3n de la VPC?","text":"<p>1.- Creaci\u00f3n de la VPC</p> <ul> <li>Definir el rango de direcciones IP (CIDR Block) al crear la VPC.</li> </ul> <p>2.- Divisi\u00f3n en subredes</p> <ul> <li>Crear subredes p\u00fablicas y privadas seg\u00fan las necesidades.</li> <li>Asociar tablas de enrutamiento a las subredes para definir c\u00f3mo se enruta el tr\u00e1fico.</li> </ul> <p>3.- Configuraci\u00f3n de acceso a Internet</p> <ul> <li>Asociar un Internet Gateway a la VPC para el tr\u00e1fico de subredes p\u00fablicas.</li> <li>Usar un NAT Gateway para que subredes privadas puedan realizar conexiones salientes.</li> </ul> <p>4.- Seguridad</p> <ul> <li>Configurar Security Groups y Network ACLs para controlar el tr\u00e1fico entrante y saliente.</li> </ul> <p>5.- Conexi\u00f3n a otros recursos</p> <ul> <li>Configurar endpoints de VPC para comunicaci\u00f3n con servicios de AWS.</li> <li>Establecer peering con otras VPCs si se necesita acceso a redes privadas adicionales.</li> </ul>"},{"location":"faqredes.html#como-se-conecta-una-instancia-ec2-a-internet","title":"\u00bfC\u00f3mo se conecta una instancia EC2 a Internet?","text":"<p>1.- Una instancia en una subred p\u00fablica necesita conectarse a Internet:</p> <ul> <li>Tiene una direcci\u00f3n IP p\u00fablica asignada.</li> <li>La tabla de enrutamiento de su subred tiene una ruta hacia el Internet Gateway.</li> <li>El tr\u00e1fico fluye desde la instancia \u2192 tabla de enrutamiento \u2192 Internet Gateway \u2192 Internet.</li> </ul> <p>2.- Una instancia en una subred privada necesita descargar actualizaciones:</p> <ul> <li>El tr\u00e1fico pasa desde la instancia \u2192 tabla de enrutamiento (subred privada)\u2192 NAT Gateway (en la subred p\u00fablica) \u2192 tabla de enrutamiento (subred p\u00fablica) \u2192 Internet Gateway \u2192 Internet.</li> <li>La respuesta regresa a trav\u00e9s del NAT Gateway hacia la instancia.</li> </ul>"},{"location":"faqredes.html#ips-publicas","title":"IPs P\u00fablicas","text":""},{"location":"faqredes.html#donde-se-asocian-las-ips-publicas-y-para-que","title":"\u00bfD\u00f3nde se asocian las IPs p\u00fablicas y para qu\u00e9?","text":"<p>Cuando se crea una VPC en AWS, no se asocia autom\u00e1ticamente una IP p\u00fablica a toda la VPC, pero dependiendo de c\u00f3mo se configuren los recursos dentro de la VPC, se pueden asignar direcciones IP p\u00fablicas de manera autom\u00e1tica o manual. Por ejemplo a Instancias EC2, o NAT Gateways.</p>"},{"location":"faqredes.html#para-que-sirve-una-ip-publica-en-una-instancia-ec2","title":"\u00bfPara qu\u00e9 sirve una IP P\u00fablica en una instancia EC2?","text":"<ul> <li>Permite que la instancia EC2 sea accesible desde Internet.</li> <li>Se utiliza cuando necesitas que la instancia act\u00fae como servidor web, aplicaci\u00f3n o cualquier servicio que reciba conexiones entrantes desde la red p\u00fablica.</li> </ul>"},{"location":"faqredes.html#cuando-se-debe-asignar-automaticamente-una-ip-publica","title":"\u00bfCu\u00e1ndo se debe asignar autom\u00e1ticamente una IP p\u00fablica?","text":"<ul> <li> <p>Subred p\u00fablica con asignaci\u00f3n autom\u00e1tica</p> <ul> <li>Cuando creas una subred p\u00fablica, puedes habilitar la opci\u00f3n \"Auto-assign public IPv4 address\".</li> <li>Todas las instancias lanzadas en esa subred obtendr\u00e1n autom\u00e1ticamente una direcci\u00f3n IP p\u00fablica.</li> </ul> </li> <li> <p>Subred privada sin IP p\u00fablica</p> <ul> <li>Si lanzas instancias en una subred privada, no obtendr\u00e1n direcciones IP p\u00fablicas autom\u00e1ticamente. Necesitar\u00e1s un NAT Gateway para que las instancias accedan a Internet (solo tr\u00e1fico saliente).</li> </ul> </li> </ul>"},{"location":"faqredes.html#que-pasa-si-no-necesito-una-ip-publica","title":"\u00bfQu\u00e9 pasa si no necesito una IP p\u00fablica?","text":"<p>Si no deseas que una instancia sea accesible desde Internet:</p> <ul> <li>Col\u00f3cala en una subred privada.</li> <li>Desactiva la opci\u00f3n \"Auto-assign public IP\" al lanzar la instancia.</li> <li>Usa un NAT Gateway o Endpoint para el tr\u00e1fico saliente, si es necesario.</li> </ul>"},{"location":"faqredes.html#que-es-una-elastic-ip","title":"\u00bfQu\u00e9 es una Elastic IP?","text":"<p>Es una direcci\u00f3n IP p\u00fablica est\u00e1tica que puedes asignar manualmente a un recurso, como una instancia EC2 o un NAT Gateway.</p> <ul> <li>Asegura que la direcci\u00f3n IP p\u00fablica de tu recurso no cambie aunque la instancia o el NAT Gateway se reinicie.</li> <li>Es ideal para casos donde necesitas una direcci\u00f3n IP conocida para dominios o para establecer reglas de firewall externas.</li> </ul>"},{"location":"faqredes.html#donde-se-asocia-una-elastic-ip","title":"\u00bfD\u00f3nde se asocia una Elastic IP?","text":"<p>Directamente a la instancia EC2 o al NAT Gateway en la configuraci\u00f3n de red.</p>"},{"location":"faqredes.html#tablas-de-enrutamiento","title":"Tablas de enrutamiento","text":""},{"location":"faqredes.html#que-es-una-tabla-de-enrutamiento","title":"\u00bfQu\u00e9 es una tabla de enrutamiento?","text":"<p>Una tabla de enrutamiento es un componente fundamental en las redes de una VPC de AWS. Define c\u00f3mo se dirige el tr\u00e1fico dentro de la VPC y hacia redes externas, como Internet u otras VPC. B\u00e1sicamente, es un conjunto de reglas que determinan a d\u00f3nde se env\u00edan los paquetes de datos basados en su destino.</p>"},{"location":"faqredes.html#como-funciona-una-tabla-de-enrutamiento","title":"\u00bfC\u00f3mo funciona una tabla de enrutamiento?","text":"<p>Cuando una instancia dentro de una subred env\u00eda un paquete de datos, el sistema de enrutamiento utiliza la tabla de enrutamiento asociada para determinar a d\u00f3nde debe dirigirse el tr\u00e1fico:</p> <p>-Examina la direcci\u00f3n de destino del paquete. - Busca una regla en la tabla de enrutamiento que coincida con esa direcci\u00f3n. - Redirige el tr\u00e1fico al destino especificado en la regla.</p>"},{"location":"faqredes.html#como-seria-un-ejemplo-de-tabla-de-entutamiento-de-una-subred-privada","title":"\u00bfC\u00f3mo ser\u00eda un ejemplo de tabla de entutamiento de una subred privada?","text":"Destino Objetivo 10.0.0.0 /16 local 0.0.0.0 /16 nat-gateway <p>Interpretaci\u00f3n:</p> <ul> <li>10.0.0.0/16 -&gt; local:         Permite que todos los recursos dentro de la VPC con direcci\u00f3n en el rango 10.0.0.0/16 se comuniquen entre s\u00ed sin salir de la red privada.</li> <li>0.0.0.0/0 -&gt; NAT-Gateway:         Redirige el tr\u00e1fico saliente destinado a Internet al NAT Gateway que se encuentra en la subred p\u00fablica.         El NAT Gateway permite que las instancias en la subred privada se comuniquen con Internet sin ser directamente accesibles desde \u00e9l.</li> </ul>"},{"location":"faqredes.html#como-seria-un-ejemplo-de-tabla-de-entutamiento-de-la-subred-publica","title":"\u00bfC\u00f3mo ser\u00eda un ejemplo de tabla de entutamiento de la subred p\u00fablica?","text":"Destino Objetivo 10.0.0.0 /16 local 0.0.0.0 /16 Internet-gateway <p>Interpretaci\u00f3n:</p> <ul> <li>10.0.0.0/16 -&gt; local:         Igual que en la tabla privada, permite la comunicaci\u00f3n entre recursos dentro de la VPC sin salir de la red.</li> <li>0.0.0.0/0 -&gt; Internet-Gateway:         Define que todo el tr\u00e1fico destinado a Internet (es decir, fuera del rango 10.0.0.0/16) sea redirigido al Internet Gateway.         Este es el componente clave que convierte esta subred en una subred p\u00fablica.</li> </ul>"},{"location":"faqredes.html#que-tipos-de-destinos-targets-son-comunes","title":"\u00bfQu\u00e9 tipos de destinos (Targets) son comunes?","text":"<ul> <li>Internet Gateway (IGW): Para tr\u00e1fico saliente e entrante hacia Internet.</li> <li>NAT Gateway: Para permitir que subredes privadas env\u00eden tr\u00e1fico saliente a Internet.</li> <li>VPC Peering Connection: Para comunicarse con otra VPC en AWS.</li> <li>VPN Gateway: Para conectar la VPC con redes locales mediante VPN.</li> <li>Instance (ENI): Para redirigir tr\u00e1fico directamente a una instancia espec\u00edfica.</li> </ul>"},{"location":"faqredes.html#internet-gateway","title":"Internet Gateway","text":""},{"location":"faqredes.html#que-es-el-internet-gateway","title":"\u00bfQu\u00e9 es el Internet Gateway?","text":"<p>El Internet Gateway (IGW) en AWS es un componente de red que permite la comunicaci\u00f3n entre tu VPC y el Internet p\u00fablico. Act\u00faa como un puente que enruta el tr\u00e1fico desde y hacia las instancias en subredes p\u00fablicas de la VPC.</p>"},{"location":"faqredes.html#como-funciona-el-internet-gateway","title":"\u00bfC\u00f3mo funciona el Internet Gateway?","text":"<p>1.- Asociaci\u00f3n con la VPC:</p> <ul> <li>El IGW debe estar asociado a una VPC espec\u00edfica. Una VPC puede tener solo un IGW activo al mismo tiempo.</li> </ul> <p>2.- Rutas de tr\u00e1fico:</p> <ul> <li>Para que las instancias puedan comunicarse con Internet, la tabla de enrutamiento de la subred debe tener una ruta expl\u00edcita que env\u00ede el tr\u00e1fico a trav\u00e9s del IGW:</li> </ul> <pre><code>    Destino: 0.0.0.0/0\n    Target: igw-xxxxxxxxxx\n</code></pre> <p>3.- Requisitos de IP p\u00fablica:</p> <ul> <li> <p>Las instancias que desees que sean accesibles desde Internet deben:</p> <ul> <li>Tener una direcci\u00f3n IP p\u00fablica (asignada autom\u00e1ticamente o manualmente).</li> <li>Tener un Security Group configurado para permitir el tr\u00e1fico entrante desde Internet, como el puerto 22 para SSH o 80/443 para HTTP/HTTPS.</li> </ul> </li> </ul> <p>4.- Reglas de seguridad:</p> <ul> <li> <p>El tr\u00e1fico permitido hacia las instancias tambi\u00e9n depende de:</p> <ul> <li>Security Groups: Controlan qu\u00e9 conexiones entrantes y salientes est\u00e1n permitidas.</li> <li>Network ACLs: Proporcionan control adicional sobre el tr\u00e1fico a nivel de subred.</li> </ul> </li> </ul>"},{"location":"faqredes.html#nat-gateway","title":"NAT Gateway","text":""},{"location":"faqredes.html#que-es-un-nat-gateway-y-para-que-sirve","title":"\u00bfQu\u00e9 es un NAT Gateway y para qu\u00e9 sirve?","text":"<p>Un NAT (Network Address Translation) Gateway act\u00faa como un puente entre las instancias en subredes privadas y el Internet. Su finalidad principal es permitir que las instancias en una subred privada:</p> <p>1.- Accedan a Internet de forma segura, por ejemplo, para:</p> <ul> <li>Descargar actualizaciones de software.</li> <li>Enviar datos a servicios externos.</li> </ul> <p>2.- Mantenerse protegidas contra conexiones entrantes no deseadas desde Internet.</p>"},{"location":"faqredes.html#por-que-necesita-una-ip-publica","title":"\u00bfPor qu\u00e9 necesita una IP p\u00fablica?","text":"<ul> <li>El NAT Gateway traduce las direcciones IP privadas de las instancias en la subred privada a su propia IP p\u00fablica.</li> <li>De esta forma, las solicitudes salientes (hacia Internet) parecen provenir del NAT Gateway y no de las instancias privadas directamente.</li> <li>La IP p\u00fablica asignada al NAT Gateway es necesaria porque:<ul> <li>Es la direcci\u00f3n que identifica al NAT Gateway en Internet.</li> <li>Permite que los servidores de Internet respondan a las solicitudes enviadas desde tus instancias privadas.</li> </ul> </li> </ul>"},{"location":"faqredes.html#como-funciona-el-flujo-de-trafico-con-un-nat-gateway","title":"\u00bfC\u00f3mo funciona el flujo de tr\u00e1fico con un NAT Gateway?","text":"<p>1.- Instancia en subred privada genera tr\u00e1fico saliente:</p> <ul> <li>Ejemplo: Una instancia necesita descargar una actualizaci\u00f3n de software desde un servidor en Internet.</li> </ul> <p>2.- Tr\u00e1fico pasa por la tabla de enrutamiento:</p> <ul> <li>La tabla de enrutamiento de la subred privada tiene una regla que redirige el tr\u00e1fico hacia el NAT Gateway.</li> </ul> <p>3.- NAT Gateway traduce la direcci\u00f3n IP:</p> <ul> <li>Cambia la direcci\u00f3n IP privada de origen de la solicitud a su propia direcci\u00f3n IP p\u00fablica.</li> <li>Env\u00eda la solicitud al servidor en Internet.</li> </ul> <p>4.- Respuesta del servidor regresa al NAT Gateway:</p> <ul> <li>El servidor en Internet responde a la IP p\u00fablica del NAT Gateway.</li> <li>El NAT Gateway traduce la respuesta y la env\u00eda de vuelta a la instancia privada correspondiente.</li> </ul>"},{"location":"practica00.html","title":"Lanzamiento el laboratorio de AWS Academy","text":""},{"location":"practica00.html#acceso-a-aws-academy","title":"Acceso a AWS Academy","text":"<p>1.- En primer lugar nos validamos con nuestro usuario y contrase\u00f1a en la p\u00e1gina de AWS Academy</p> <p></p>"},{"location":"practica00.html#acceso-al-learner-lab","title":"Acceso al Learner Lab","text":"<p>2.- En el panel de control de los cursos disponibles seleccionamos el Learner Lab correspondiente.</p> <p></p> <p></p> <p>3.- En el apartado Contenidos pulsamos sobre la opci\u00f3n Lanzamiento del laboratorio.</p> <p></p> <p></p>"},{"location":"practica00.html#lanzamiento-del-laboratorio","title":"Lanzamiento del laboratorio","text":"<p>4.- Se abre una nueva ventana con el entorno virtual de AWS en el que se nos muestra el cr\u00e9dito en d\u00f3lares que nos queda para realizar pruebas en un entorno real.</p> <p>Pulsamos sobre el bot\u00f3n Start Lab.</p> <p></p> <p></p> <p>5.- Esperqmos a que el icono situado a la derecha del texto AWS pase a verde, y pulsamos sobre el texto AWS. </p> <p></p> <p></p> <p>6.- Accedemos a la consola de AWS en un entorno real en la nube (con servicios restringidos).</p> <p></p>"},{"location":"practica01.html","title":"Creaci\u00f3n de una M\u00e1quina Virtual","text":""},{"location":"practica01.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>En esta pr\u00e1ctica vamos a crear en la nube una m\u00e1quina virtual de Windows Server 2025 y nos conectaremos a ella por RDP. Conoceremos los recursos de AWS asociados a la creaci\u00f3n de esa m\u00e1quina virtual:</p> <ul> <li>La instancia EC2 (la propia m\u00e1quina virtual).</li> <li>El volumen EBS asociado (el disco duro de la m\u00e1quina virtual).</li> <li>La red (VPC) y la subred virtual a la que est\u00e1 conectada la m\u00e1quina.</li> <li>Un Internet Gateway (puerta de enlace) para salir a Internet desde la red virtual.</li> <li>Una direcci\u00f3n IP P\u00fablica para conectarnos desde el exterior.</li> <li>Una direcci\u00f3n IP El\u00e1stica (la IP p\u00fablica, pero est\u00e1tica, para que no cambie al reiniciar la m\u00e1quina).</li> <li>Un grupo de seguridad (firewall) para controlar los accesos.</li> </ul>"},{"location":"practica01.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica01.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":""},{"location":"practica01.html#acceso-a-ec2","title":"Acceso a EC2","text":"<p>1.- Vamos a crear directamente una m\u00e1quina en la red virtual (VPC) creada por defecto. Para ello accedemos directamente al servicio de m\u00e1quinas virtuales de AWS llamado EC2 (Amazon Elastic Compute Cloud).</p> <ul> <li>Buscamos el servicio EC2 en la consola.</li> <li>Accedemos y pulsamos sobre Lanzar la Instancia.</li> </ul> <p>Nota</p> <p>Tenemos una red creada de manera predeterminada con una direcci\u00f3n de red 172.31.0.0/16, la cual tiene 6 subredes ubicadas en 6 zonas de disponibilidad distintas de la regi\u00f3n en la que se lanza el laboratorio (Norte de Virginia: us-east-1). Vamos a crear la m\u00e1quina en esta red por defecto.</p> <p></p>"},{"location":"practica01.html#lanzamiento-de-la-instancia","title":"Lanzamiento de la instancia","text":"<p>2.- Para lanzar la instancia EC2 es necesario asignarle una serie de par\u00e1metros obligatorios y configurar otros opcionales.</p> <ul> <li>El nombre del equipo ser\u00e1 W2025</li> <li>Seleccionamos una imagen (AMI) de Microsoft Windows Server 2025 Base.</li> <li>En el tama\u00f1o de la m\u00e1quina seleccionamos un tipo de instancia t3.medium (2 CPUS y 4 GiB de RAM)</li> <li>En el par de claves podemos elegir entre crear un nuevo par de claves o utilizar las ya creadas de nuestro laboratorio (vockey). Seleccionamos las ya creadas vockey.</li> <li>En la configuraci\u00f3n de red pulsamos en Editar:<ul> <li>Dejamos la VPC (la red virtual) predeterminada.</li> <li>Seleccionamos una subred (por ejemplo la asociada a la zona de disponibilidad 2 cuyo nombre es us-east-1b y su direcci\u00f3n de red es 172.13.16.0/20)</li> <li>Habilitamos la asignaci\u00f3n de una IP P\u00fablica para conectarnos desde Internet a esta m\u00e1quina.</li> <li>Creamos un grupo de seguridad (reglas de firewall) nuevo y lo llamamos acceso-remoto y le ponemos una descripci\u00f3n (acceso remoto a W2025)</li> <li>Como regla de entrada dejamos la que viene por defecto que habilita el puerto 3389 (RDP) desde cualquier lugar de Internet (0.0.0.0/0)</li> </ul> </li> <li>Dejamos las opciones de almacenamiento que nos propone por defecto: 30GiB en un disco SSD de uso general.</li> <li>Lanzamos la instancia.</li> </ul> <p></p>"},{"location":"practica01.html#comprobacion-de-los-recursos-creados","title":"Comprobaci\u00f3n de los recursos creados","text":"<p>Tras unos minutos se nos crea la instancia, y con ella los siguientes recursos que podemos comprobar.</p> <p>3.- Accede al panel principal de EC2.</p> <p></p> <p>Comprueba pinchando sobre el enlace correspondiente que se ha creado:</p> <ul> <li>Una instancia (m\u00e1quina).</li> <li>Un volumen EBS (disco duro).</li> <li>2 Grupos de seguridad (el que ven\u00eda por defecto y el que hemos creado llamado acceso-remoto).</li> </ul> <p></p> <p>4.- Accede en la consola al panel de VPC.</p> <p></p> <p>Comprueba que nos aparece una VPC que ya ven\u00eda creada por defecto. Accede a ella y ver\u00e1s las subredes y recursos asociados:</p> <ul> <li>6 Subredes en 6 AZs</li> <li>1 Tabla de enrutamiento utilizada por todas las subredes.</li> <li>1 Conexi\u00f3n de red a Internet: Internet Gateway</li> </ul> <p></p> <p></p>"},{"location":"practica01.html#acceso-por-rdp","title":"Acceso por RDP","text":"<p>Vamos a iniciar una sesi\u00f3n de escritorio remoto en la m\u00e1quina creada. Al crear la m\u00e1quina no nos ha solicitado nombre de usuario y contrase\u00f1a. Por seguridad, nos crea una contrase\u00f1a compleja que solamente podemos ver utilizando el par de claves p\u00fablica y privada que hemos seleccionado al crear la m\u00e1quina.</p> <p>El primer paso para poder ver la contrase\u00f1a es descargarnos el fichero de la clave o copiar el contenido. </p> <p>5.- Accede a la consola de lanzamiento del laboratorio y en Detalles pulsa sobre una de las opciones de descarga o visualizaci\u00f3n de la clave privada. Descarga, por ejemplo, el fichero PEM.</p> <p></p> <p>6.- En la consola de AWS accede al panel de la instancia EC2 que acabamos de lanzar y pulsa sobre Conectar. En la pesta\u00f1a de Cliente RDP descarga el archivo RDP y pulsa sobre Obtener Contrase\u00f1a. Para descifrarla te pide la clave privada que acabas de descargar.</p> <p>Una vez descifrada, ya podemos abrir el fichero RDP descargado e introducir el usuario (Administrator) y la contrase\u00f1a para iniciar sesi\u00f3n.</p> <p></p>"},{"location":"practica01.html#acceso-por-ssh","title":"Acceso por SSH","text":"<p>Vamos a iniciar ahora una sesi\u00f3n al servidor W2025 desde nuestra m\u00e1quina local, pero esta vez utilizando el protocolo SSH.</p> <p>7.- En primer lugar, con la sesi\u00f3n de Escritorio Remoto abierta en la m\u00e1quina Windows Server realiza las siguientes acciones:</p> <ul> <li>Habilita en el panel del Administraci\u00f3n del servidor el Acceso Remoto por SSH.</li> <li>En el firewall de Windows (Windows defender firewall with advanced security que se encuentra en las Herramientas Administrativas) a\u00f1ade una regla de entrada para permitir conexiones del puerto 22 desde cualquier red.</li> </ul> <p></p> <p>8.- Ahora, en la consola de AWS, configura el grupo de seguridad que creamos en el momento de lanzar la instancia (acceso-remoto) y edita las Reglas de entrada para a\u00f1adir el protocolo SSH (puerto TCP 22) desde cualquier direcci\u00f3n IPv4.</p> <p></p> <p>9.- Desde el panel de EC2, vemos los detalles de nuestra instancia en ejecuci\u00f3n y comprobamos la IP P\u00fablica asignada a la instancia.</p> <p></p> <p>Ya podemos desde un terminal lanzar un ssh a la direcci\u00f3n p\u00fablica asociada a nuestra instancia EC2:</p> <pre><code>ssh administrator@54.242.76.151\n</code></pre> <p>Nota</p> <p>Nos hemos conectado por contrase\u00f1a, lo cual es una pr\u00e1ctica poco recomendada en AWS. Veremos que en las instancias con Linux lo haremos siempre mediante un par de claves.</p>"},{"location":"practica01.html#asignacion-ip-elastica","title":"Asignaci\u00f3n IP El\u00e1stica","text":"<p>Esa direcci\u00f3n IP p\u00fablica a la que nos hemos conectado no es fija, de modo que cada vez que se reinicie la instancia (o apaguemos el laboratorio) la direcci\u00f3n puede cambiar. Podemos asignar una IP fija (con un incremento del costo) a nuestra m\u00e1quina para evitar que esto suceda. Para ello utilizamos las IP El\u00e1sticas de AWS.</p> <p>10.- En el panel de recursos de EC2, accede a Direcciones IP el\u00e1sticas:</p> <ul> <li>Asigna (crea) una nueva direcci\u00f3n el\u00e1stica.</li> <li>Una vez creada, hay que asociarla a un recurso. En nuestro caso a la instancia EC2. En Acciones selecciona la opci\u00f3n Direcci\u00f3n IP el\u00e1stica asociada y elige el id de la instancia W2025.</li> <li>Esta acci\u00f3n provocar\u00e1 un cambio inmediato de la direcci\u00f3n IP P\u00fablica que ten\u00edamos por la nueva IP el\u00e1stica, obligando a rehacer las conexiones.</li> </ul> <p></p>"},{"location":"practica01.html#liberacion-de-recursos","title":"Liberaci\u00f3n de recursos","text":"<p>11.- Una vez finalizada la pr\u00e1ctica hay que eliminar los recursos creados para que no nos consuman cr\u00e9dito:</p> <ul> <li>Comenzamos liberando la IP el\u00e1stica. Para ello desasociamos la IP el\u00e1stica y a continuaci\u00f3n seleccionamos la opci\u00f3n Publicar direcci\u00f3n IP el\u00e1stica. (Publicar = hacer p\u00fablica = disponible).</li> <li>Terminamos la instancia. En el panel de EC2, con la instancia seleccionada, pulsamos sobre la Acci\u00f3n Terminar (eliminar) instancia. Nos informa que el volumen EBS asociado tambi\u00e9n se eliminar\u00e1.</li> <li>Por \u00faltimo, eliminamos el grupo de seguridad acceso-remoto.</li> </ul> <p>Recuerda finalizar el laboratorio.</p>"},{"location":"practica02.html","title":"Almacenamiento en AWS","text":""},{"location":"practica02.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":""},{"location":"practica02.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica02.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":""},{"location":"practica03.html","title":"Redes Virtuales","text":""},{"location":"practica03.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>En la pr\u00e1ctica de creaci\u00f3n de la M\u00e1quina Virtual hemos visto que al crear una m\u00e1quina en AWS hemos utilizado una serie de recursos asociados a la red en la que se encuentra la m\u00e1quina:</p> <ul> <li>La red virtual (VPC) de la infraestructura que estamos utilizando.</li> <li>La subred dentro de la VPC a la que est\u00e1 conectada la instancia.</li> <li>Un Internet Gateway.</li> <li>Una tabla de enrutamiento asociada a la subred.</li> <li>Un grupo de seguridad que ejerce de cortafuegos.</li> <li>Una direcci\u00f3n IP p\u00fablica para conectarnos desde el exterior.</li> <li>Una IP el\u00e1stica asociada a esa IP P\u00fablica para que sea siempre fija.</li> </ul> <p>En esta pr\u00e1ctica vamos a crear de manera manual todos estos recursos para poder configurarlos seg\u00fan nuestras necesidades. Vamos a implementar un esquema en el que tendremos una red virtual con dos subredes (subred-publica y subred-privada). En cada una de ellas crearemos una m\u00e1quina virtual Ubuntu:</p> <ul> <li>La primera ser\u00e1 accesible desde el exterior de la red (desde Internet) y para ello crearemos un grupo de seguridad en el que habilitaremos el puerto 22 (ssh) y el 80 (http) para que puedan entrar desde cualquier direcci\u00f3n. Adem\u00e1s necesitaremos una IP P\u00fablica y un Internet Gateway que dar\u00e1 salida al exterior a todos los elementos de la subred.</li> <li>La segunda m\u00e1quina estar\u00e1 en la subred-privada y configuraremos su grupo de seguridad para que sea accesible \u00fanicamente desde la subred-p\u00fablica, sin acceso desde el exterior. Para que esta m\u00e1quina tenga acceso a Internet (por ejemplo para poder hacer actualizaciones) pero no sea accesible desde Internet, necesitaremos un NAT-Gateway que se ubicar\u00e1 en la subred-p\u00fablica</li> </ul>"},{"location":"practica03.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica03.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":""},{"location":"practica03.html#eliminacion-de-la-vpc-por-defecto","title":"Eliminaci\u00f3n de la VPC por defecto","text":"<p>Comenzamos por eliminar la VPC creada por defecto junto con todos sus recursos asociados.</p> <p>1.- Accedemos al panel VPC y eliminamos la VPC. Nos informa que se eliminar\u00e1n 8 recursos asociados:</p> <ul> <li>Las 6 subredes p\u00fablicas</li> <li>El Internet Gateway</li> <li>El Grupo de Seguridad</li> </ul> <p></p>"},{"location":"practica03.html#creacion-de-la-nueva-vpc","title":"Creaci\u00f3n de la nueva VPC","text":"<p>2.- Procedemos a crear la nueva VPC:</p> <ul> <li>Le decimos que queremos crear la VPC y m\u00e1s.</li> <li>Asignamos un nombre a la VPC, por ejemplo practica02</li> <li>Como direcci\u00f3n de red (Bloque de CIDR IPv4) dejamos la 10.0.0.0/16</li> <li>Seleccionamos una \u00fanica zona de disponibilidad (AZ).</li> <li>Le decimos que nos cree una subred p\u00fablica y otra privada.</li> <li>Personalizamos los bloques de direcciones de modo que las subredes tengan las siguientes direcciones:<ul> <li>Subred p\u00fablica: 10.0.1.0/24</li> <li>Subred privada: 10.0.2.0/24</li> </ul> </li> <li>Como deseamos que la subred privada tenga salida a Internet, creamos un Gateway NAT en 1 AZ (ojo, esto nos incrementar\u00e1 el coste considerablemente).</li> <li>No vamos a conectar ning\u00fan bucket de S3, por tanto no seleccionamos ning\u00fan Gateway de S3 en el apartado de Puntos de enlace de la VPC.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"practica03.html#comprobacion-de-los-recursos-creados","title":"Comprobaci\u00f3n de los recursos creados","text":"<p>3.- Comprobamos los recursos creados:</p> <ul> <li>La VPC (practica02-vpc).</li> <li>Las 2 subredes (practica02-subnet-public1 y practica02-subnet-private1).</li> <li>El Internet Gateway (practica02-igw).</li> <li>Las 2 tablas de enrutamiento (una por cada subred: practica02-rtb-public y practica02-rtb-private).</li> <li>Una tabla de enrutamiento por defecto.</li> <li>Un Grupo de Seguridad por defecto.</li> <li>El NAT Gateway (practica02-nat-public1) ubicado en la subred p\u00fablica para dar salida a Internet en la subred privada.</li> <li>Una IP El\u00e1stica asociada al NAT Gateway (practica02-eip).</li> </ul> <p></p>"},{"location":"practica03.html#tablas-de-enrutamiento","title":"Tablas de enrutamiento","text":"<p>Al crearse la VPC se han creado 3 tablas de enrutamiento: una por defecto y dos asociadas a las 2 subredes que hemos creado. Las 2 tablas asociadas a las nuevas subredes son las siguientes:</p> <p>Tabla de entutamiento de la subred privada</p> <p>Uso T\u00edpico</p> <p>Subred privada que aloja recursos como:</p> <ul> <li>Bases de datos, servidores de aplicaciones o backend.</li> <li>Instancias que requieren acceso saliente a Internet (actualizaciones, APIs externas), pero que no deben recibir tr\u00e1fico entrante directamente desde Internet.</li> </ul> Destino Objetivo 10.0.0.0 /16 local 0.0.0.0 /16 nat-gateway <p>Interpretaci\u00f3n:</p> <ul> <li>10.0.0.0/16 -&gt; local:         Permite que todos los recursos dentro de la VPC con direcci\u00f3n en el rango 10.0.0.0/16 se comuniquen entre s\u00ed sin salir de la red privada.</li> <li>0.0.0.0/0 -&gt; NAT-Gateway:         Redirige el tr\u00e1fico saliente destinado a Internet al NAT Gateway que se encuentra en la subred p\u00fablica.         El NAT Gateway permite que las instancias en la subred privada se comuniquen con Internet sin ser directamente accesibles desde \u00e9l.</li> </ul> <p></p> <p>Tabla de entutamiento de la subred p\u00fablica</p> <p>Uso T\u00edpico</p> <p>Subred p\u00fablica que aloja recursos como:</p> <ul> <li>Servidores web o aplicaciones que necesitan acceso desde Internet.</li> <li>Instancias EC2 con direcciones IP p\u00fablicas.</li> </ul> Destino Objetivo 10.0.0.0 /16 local 0.0.0.0 /16 Internet-gateway <p>Interpretaci\u00f3n:</p> <ul> <li>10.0.0.0/16 -&gt; local:         Igual que en la tabla privada, permite la comunicaci\u00f3n entre recursos dentro de la VPC sin salir de la red.</li> <li>0.0.0.0/0 -&gt; Internet-Gateway:         Define que todo el tr\u00e1fico destinado a Internet (es decir, fuera del rango 10.0.0.0/16) sea redirigido al Internet Gateway.         Este es el componente clave que convierte esta subred en una subred p\u00fablica.</li> </ul> <p></p>"},{"location":"practica03.html#creacion-de-una-instancia-ec2-en-la-subred-publica","title":"Creaci\u00f3n de una instancia EC2 en la subred p\u00fablica","text":"<p>Vamos a crear una m\u00e1quina Ubuntu en la subred p\u00fablica a la cual nos podremos conectar desde Internet.</p> <p>4.- Accedemos al panel de EC2 y lanzamos una instancia.</p> <ul> <li>La nombramos ub01</li> <li>La imagen ser\u00e1 una AMI de Ubuntu 24.04 LTS.</li> <li>En tipo de instancia seleccionamos una t2.micro (1 CPU y 1GB de RAM) incluida en la capa gratuita.</li> <li>Seleccionamos el par de claves vockey proporcionadas por el laboratorio.</li> <li>Editamos la configuraci\u00f3n de red.<ul> <li>Incluimos la m\u00e1quina en la subred p\u00fablica creada.</li> <li>Habilitamos la asignaci\u00f3n de una IP P\u00fablica.</li> <li>Creamos un grupo de seguridad (reglas de firewall) nuevo y lo llamamos acceso-publico y le ponemos una descripci\u00f3n (acceso ssh a subred publica)</li> <li>Como regla de entrada dejamos la que viene por defecto que habilita el puerto 22 (SSH) desde cualquier lugar de Internet (0.0.0.0/0)</li> </ul> </li> <li>Dejamos las opciones de almacenamiento que nos propone por defecto: 8GiB en un disco SSD de uso general.</li> <li>Lanzamos la instancia.</li> </ul> <p>Nota</p> <p>Hay que tener en cuenta que la direcci\u00f3n IP asignada ser\u00e1 din\u00e1mica, por lo que si dese\u00e1ramos que nuestra m\u00e1quina fuera, por ejemplo, un servidor web, habr\u00eda que asociarle una IP el\u00e1stica, que equivale a asignarle una IP p\u00fablica est\u00e1tica.</p> <p></p>"},{"location":"practica03.html#conexion-mediante-ssh","title":"Conexi\u00f3n mediante SSH","text":"<p>Al crear la instancia no nos ha preguntado por ning\u00fan usuario ni contrase\u00f1a en el sistema operativo. AWS crea unos usuarios por defecto que var\u00edan dependiendo del tipo de AMI seleccionada. Se pueden consultar aqu\u00ed.</p> <p>Para conectarnos a la m\u00e1quina mediante ssh lo debemos hacer con un par de claves. En nuestro caso le hemos indicado que utilizar\u00edamos las del laboratorio (vockey), por tanto el primer es descargarnos el fichero de la clave.</p> <p>5.- Accedemos a la consola de lanzamiento del laboratorio y en Detalles pulsamos sobre la descarga del fichero PEM.</p> <p></p> <p>6.- Una vez descargado el fichero de clave debemos cambiar los permisos de dicho archivo:</p> <ul> <li>En Linux: <code>chmod 400 labuser.pem</code></li> <li>En Windows: Dejamos \u00fanicamente los permisos para nuestro usuario, eliminando los accesos del resto de usuarios.</li> </ul> <p>7.- Lanzamos el ssh indicando el fichero de la clave privada descargada y sustituyendo por la url correspondiente:</p> <pre><code>ssh -i \"labuser.pem\" ubuntu@ec2-204-236-197-47.compute-1.amazonaws.com\n</code></pre> <p></p>"},{"location":"practica03.html#instalacion-de-un-servidor-web","title":"Instalaci\u00f3n de un servidor web","text":"<p>Una vez dentro de la m\u00e1quina vamos a instalar un servidor web.</p> <p>8.- Ejecutamos:</p> <pre><code>sudo apt update\nsudo apt install apache2 -y\n</code></pre> <p></p>"},{"location":"practica03.html#acceso-a-la-pagina-web","title":"Acceso a la p\u00e1gina web","text":"<p>9.- Una vez instalado el servidor Apache, accedemos desde el navegador de nuestra m\u00e1quina local a la direcci\u00f3n IP P\u00fablica de  nuestra m\u00e1quina AWS.</p> <p>A pesar de tener instalado y corriendo el servidor web, el navegador no es capaz de resolver la direcci\u00f3n puesto que en el firewall de la instancia (grupo de seguridad acceso-publico) s\u00f3lo hemos permitido conexiones desde el puerto 22.</p> <p>Vamos a permitir conexiones tambi\u00e9n del puerto 80 (http) a\u00f1adiendo una nueva regla de entrada en el grupo de seguridad acceso-publico.</p> <p> 10.- En la consola de AWS, dentro del panel de VPC, accedemos al grupo de seguridad acceso-publico para editar sus propiedades:</p> <ul> <li>En las Reglas de entrada a\u00f1adimos una del tipo HTTP (Puerto TCP 80) para permitir accesos desde cualquier direcci\u00f3n (0.0.0.0/0).</li> </ul> <p> 11.- Guardamos las reglas y ya podemos acceder desde el navegador a la p\u00e1gina por defecto del servidor Apache instalado en nuestra m\u00e1quina.</p> <p></p>"},{"location":"practica03.html#creacion-de-una-instancia-ec2-en-la-subred-privada","title":"Creaci\u00f3n de una instancia EC2 en la subred privada","text":"<p>Vamos a crear una m\u00e1quina Ubuntu en la subred privada a la cual NO nos podremos conectar desde Internet.</p> <p>12.- Accedemos al panel de EC2 y lanzamos una instancia.</p> <ul> <li>La nombramos ub02</li> <li>La imagen ser\u00e1 una AMI de Ubuntu 24.04 LTS.</li> <li>En tipo de instancia seleccionamos una t2.micro (1 CPU y 1GB de RAM) incluida en la capa gratuita.</li> <li>Seleccionamos el par de claves vockey proporcionadas por el laboratorio.</li> <li>Editamos la configuraci\u00f3n de red.<ul> <li>Incluimos la m\u00e1quina en la subred privada creada.</li> <li>NO habilitamos la asignaci\u00f3n de una IP P\u00fablica.</li> <li>Creamos un grupo de seguridad (reglas de firewall) nuevo y lo llamamos acceso-privado y le ponemos una descripci\u00f3n (acceso ssh a subred privada)</li> <li>Como regla de entrada dejamos la que viene por defecto que habilita el puerto 22 (SSH) desde tipo de origen Personalizado, y como origen seleccionamos el grupo de seguridad acceso-publico</li> </ul> </li> <li>Dejamos las opciones de almacenamiento que nos propone por defecto: 8GiB en un disco SSD de uso general.</li> <li>Lanzamos la instancia.</li> </ul> <p>Nota</p> <p>En el grupo de seguridad asociado a esta instancia hemos dicho que s\u00f3lo se pueden admitir conexiones por ssh provenientes del grupo de seguridad acceso-publico, de modo que para poder conectarnos a la m\u00e1quina ub02 \u00fanicamente podremos hacerlo desde la m\u00e1quina ubu01.</p> <p></p>"},{"location":"practica03.html#conexion-mediante-ssh_1","title":"Conexi\u00f3n mediante SSH","text":"<p>La m\u00e1quina ubu02 no tiene direcci\u00f3n p\u00fablica, y adem\u00e1s, aunque la tuviera, el grupo de seguridad solamente admite conexiones desde la subred p\u00fablica, y no desde Internet. Por todo ello, si deseamos conectarnos a esta m\u00e1quina, el \u00fanico modo es hacerlo desde la m\u00e1quina ub01. Para ello necesitamos 2 requisitos:</p> <ul> <li>Averiguar la IP de la m\u00e1quina (Sabemos que al estar en la subred privada estar\u00e1 en el rango de direcciones 10.0.2.0/24)</li> <li>Pasar la clave privada (labuser.pem) que descargamos en nuestra m\u00e1quina local a la m\u00e1quina ub01, pues nos har\u00e1 falta para conectarnos a ub02.</li> </ul> <p>13.- Comenzamos accediendo desde el panel de EC2 a los detalles de la instancia ub02 copiamos la direcci\u00f3n IP privada.</p> <p>14.- En segundo lugar, desde nuestra m\u00e1quina host (y con la conexi\u00f3n ssh cerrada) copiamos el archivo labuser.pem a la m\u00e1quina ubu01 mediante el comando scp:</p> <pre><code>scp -i labsuser.pem labsuser.pem ubuntu@ec2-18-212-203-120.compute-1.amazonaws.com:/home/ubuntu/clave_privada\n</code></pre> <p>15.- Iniciamos sesi\u00f3n en ub01:</p> <pre><code>ssh -i \"labuser.pem\" ubuntu@ec2-204-236-197-47.compute-1.amazonaws.com\n</code></pre> <p>16.- Comprobamos con un ls que se ha copiado el fichero y cambiamos los permisos:</p> <p><pre><code>ls -l\nchmod 400 clave_privada\n</code></pre> 17.- Nos conectamos con esa clave a la m\u00e1quina ub02 mediante la IP privada que anotamos:</p> <pre><code>ssh -i clave_privada ubuntu@10.0.2.112\n</code></pre> <p>18.- Comprobamos que tenemos conexi\u00f3n de salida a Internet gracias al NAT Gateway:</p> <pre><code>sudo apt update\n</code></pre> <p></p>"},{"location":"practica03.html#eliminacion-del-nat-gateaway","title":"Eliminaci\u00f3n del NAT Gateaway","text":"<p>19.- Accedemos a la consola de VPC y en Gateways NAT eliminamos el gateway (practica02-nat-public1) que creamos al crear la VPC.</p> <p>20.- Intenta en ubu02 acceder a Internet, por ejemplo actualizando los repositorios:</p> <pre><code>sudo apt update\n</code></pre> <p>Ya hemos perdido la conexi\u00f3n a Internet.</p> <p></p>"},{"location":"practica03.html#eliminacion-de-recursos","title":"Eliminaci\u00f3n de recursos","text":"<p>21.- Una vez finalizada la pr\u00e1ctica hay que eliminar los recursos creados para que no nos consuman cr\u00e9dito:</p> <ul> <li>Comenzamos liberando la IP el\u00e1stica que se asoci\u00f3 al NAT Gateway. Accedemos a la consola de EC2 y en IP El\u00e1sticas seleccionamos la opci\u00f3n Publicar direcci\u00f3n IP el\u00e1stica. (Publicar = hacer p\u00fablica = disponible).</li> <li>Terminamos las instancias. En el panel de EC2, con la instancia seleccionada, pulsamos sobre la Acci\u00f3n Terminar (eliminar) instancia. Nos informa que el volumen EBS asociado tambi\u00e9n se eliminar\u00e1.</li> <li>Por \u00faltimo, esperamos unos minutos a que se acaben de terminar la instancias y eliminamos los grupos de seguridad acceso-publico y acceso-privado, comenzando por este \u00faltimo.</li> </ul> <p>Recuerda finalizar el laboratorio.</p>"},{"location":"practica04.html","title":"Bases de Datos Gestionadas (con acceso p\u00fablico)","text":""},{"location":"practica04.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>Para trabajar con una BBDD en AWS podemos optar por 2 modelos diferenciados seg\u00fan sean IaaS o PaaS:</p> <ul> <li> <p>En el primer caso, en un modelo de Infraestructura como Servicio, contratar\u00edamos la m\u00e1quina virtual, en una red virtual e instalar\u00edamos el SGBD que consider\u00e1ramos oportuno (MySQL, SQL Server, PostgrsSQL, \u2026). En este modelo gestionar\u00edamos nosotros toda la infraestructura.</p> </li> <li> <p>En el caso de optar por un modelo de Plataforma como Servicio, contratar\u00edamos directamente el servicio de base de datos, sin preocuparnos por gestionar la infraestructura que hay por debajo (m\u00e1quina, red, sistema operativo y sistema gestor de base de datos). Es lo que se conoce como un servicio gestionado. Las bases de datos gestionadas son servicios de base de datos en la nube en los que el proveedor se encarga de toda la administraci\u00f3n y mantenimiento, desde la instalaci\u00f3n y configuraci\u00f3n inicial hasta la escalabilidad, seguridad, copias de seguridad y actualizaciones.</p> </li> </ul> <p>AWS ofrece varios servicios gestionados de Bases de Datos. Los m\u00e1s populares son:</p> <ul> <li>RDS: Es una base de datos relacional gestionada basada en MySQL, PostrgreSQL, MariaDB, Oracle, Aurora o Microsoft SQL Server.</li> <li>Amazon Aurora: Es un SGBD propio de AWS compatible con MySQL y PostgrSQL que ofrece mejores prestaciones que RDS.</li> <li>Amazon DynamoDB: En este caso se trata de una base de datos NoSQL que soporta modelos de datos clave-valor y documentos.</li> <li>Amazon Neptune: Base de datos de grafos.</li> <li>Amazon Redshift: Base de datos relacional para almacenes de datos de Big Data.</li> </ul> <p>Nota</p> <p>En esta pr\u00e1ctica, el servicio gestionado de BBDD que vamos a utilizar es RDS basado en MySQL, que permite ejecutar bases de datos MySQL. </p>"},{"location":"practica04.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica04.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":"<p>1.-  Accedemos a la consola, dentro de la categor\u00eda Bases de Datos, seleccionamos el recurso RDS.</p> <p></p> <p>2.- Creamos una Base de Datos:</p> <ul> <li>Seleccionamos el m\u00e9todo de creaci\u00f3n est\u00e1ndar.</li> <li>Como motor de base de datos elegimos MySQL.</li> <li>La plantilla sobre la que se va a basar ser\u00e1 la Capa gratuita (las dem\u00e1s no son aptas para el laboratorio).</li> <li>Ponemos un nombre de servidor que debe ser \u00fanico en nuestra cuenta de AWS. Introduce uno que lleve tu nombre o iniciales.</li> <li>Asignamos nombre de usuario administrador y su contrase\u00f1a.</li> <li>Dejamos las opciones por defecto del tama\u00f1o de la instancia y el almacenamiento.</li> <li>No vamos a conectar nuestra BBDD a ninguna instancia EC2, y dejamos la BBDD en la VPC por defecto (Default VPC).</li> <li>Importante: Permitimos el Acceso P\u00fablico a nuestra BBDD. Esto generar\u00e1 una IP P\u00fablica para poder conectarnos desde Internet.</li> <li>Creamos un nuevo grupo de seguridad, por ejemplo bbdd-sg</li> <li>Los dem\u00e1s campos los dejamos por defecto.</li> </ul> <p></p> <p>Nota</p> <p>Podr\u00edamos haber seleccionado el m\u00e9todo de creaci\u00f3n r\u00e1pida, que nos pide muchos menos par\u00e1metros para crear la BBDD, pero nos habr\u00eda dejado la opci\u00f3n de Permitir Acceso P\u00fablico como NO. Ello implica que nos tocar\u00eda acceder a modificar los par\u00e1metros una vez creada la BBDD para permitir ese acceso p\u00fablico, y adem\u00e1s deber\u00edamos permitir la regla de entrada correspondiente en el grupo de seguridad.</p> <p></p> <p>3.- Una vez creado el recurso accedemos a \u00e9l y en el apartado Conectividad y seguridad comprobamos el endpoint y el puerto por al cual accederemos. Copiamos el punto de enlace en el portapapeles.</p> <p>Comprobamos tambi\u00e9n que se nos ha asociado el nuevo grupo de seguridad que hemos creado.</p> <p></p> <p> </p> <p>4.- En el apartado de Configuraci\u00f3n nos aparecen los datos de la configuraci\u00f3n de la m\u00e1quina virtual sobre la que est\u00e1 corriendo nuestro SGBD, as\u00ed como la versi\u00f3n de MySQL instalada y el nombre del usuario administrador.</p> <p></p> <p>5.- Volvemos al apartado de Conectividad y seguridad y accedemos al grupo de seguridad bbdd-sg que se nos ha creado para ver las reglas de firewall que nos ha puesto por defecto. En las reglas de entrada comprobamos que se ha creado la regla para permitir conexiones desde nuestra IP local a la BBDD por el puerto de MySQL (3306).</p> <p></p> <p> </p> <p>6.- En nuestra m\u00e1quina local establacemos una conexi\u00f3n mediante un cliente de MySQL de l\u00ednea de comandos, indicando la cadena de conexi\u00f3n y el usuario que hemos definido como administrador. En el par\u00e1metro host <code>-h</code> ponemos el nombre del servidor (endpoint que hemos copiado en el portapapeles) y en el par\u00e1metro de usuario <code>-u</code> el nombre del usuario. Para que nos solicite el password indicamos el par\u00e1metro <code>-p</code>.</p> <p><code>mysql -h database-jrpm.cruqs8qiedha.us-east-1.rds.amazonaws.com -u admin -p</code></p> <p>Una vez comprobada la conexi\u00f3n, cerramos la sesi\u00f3n:</p> <p><code>exit;</code></p> <p>Atenci\u00f3n</p> <p>Si hemos dejado la opci\u00f3n de Permitir Acceso P\u00fablico como NO o no aparece la regla de seguridad del firewall (grupo de seguridad) no podremos conectarnos.</p> <p></p> <p>7.- Vamos a crear una base de datos con una tabla. Lo vamos a hacer mediante un script de sentencias sql. Para ello comenzamos con la descarga del fichero de creaci\u00f3n de la base de datos.</p> LinuxWindows <pre><code>wget https://raw.githubusercontent.com/jrpellicer/awsasir/refs/heads/main/docs/asir.sql\n</code></pre> <p>Descarga fichero sql</p> <p></p> <p>8.- Ejecutamos las instrucciones SQL que hay en el contenido del fichero descargado. Basta con redireccionar la entrada del comando <code>mysql</code> con el fichero descargado de nombre <code>asir.sql</code>.</p> <pre><code>mysql -h database-jrpm.cruqs8qiedha.us-east-1.rds.amazonaws.com -u admin -p &lt; asir.sql\n</code></pre> <p></p> <p>9.- Comprobamos que se ha ejecutado correctamente y se ha creado la base de datos y la tabla correspondiente. Para ello volvemos a iniciar una conexi\u00f3n en el servidor MySQL y ejecutamos la consulta correspondiente:</p> <pre><code>mysql -h database-jrpm.cruqs8qiedha.us-east-1.rds.amazonaws.com -u admin -p\n</code></pre> <pre><code>use webasir;\nselect * from clientes;\nexit;\n</code></pre> <p></p> <p>10.- Podemos establacer conexi\u00f3n remota tambi\u00e9n mediante clientes GUI como DBeaver, HeidiSQL, MySQL Workbench, ... </p> <p></p> <p>11.- Desde la consola de AWS, elimina el servidor de BBDD creado para asegurarnos que no dejamos ning\u00fan recurso consumiendo cr\u00e9dito. No crees ninguna instant\u00e1nea final ni conserves las copias de seguridad.</p> <p>Atenci\u00f3n</p> <p>Si detenemos un servidor de BBDD (sin eliminarlo), AWS lo iniciar\u00e1 autom\u00e1ticamente a los 7 d\u00edas (si no lo hemos levantado nosotros de manera manual antes). Esto es peligroso, pues si olvidamos eliminar un recurso de BBDD que no utilizamos, se pondr\u00e1 en marcha autom\u00e1ticamente a los 7 d\u00edas de haberlo detenido, con el consiguiente consumo de cr\u00e9dito.</p> <p></p>"},{"location":"practica05.html","title":"Bases de Datos Gestionadas (sin acceso p\u00fablico)","text":""},{"location":"practica05.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>En esta pr\u00e1ctica vamos a crear una base de datos RDS similar a la anterior, pero la vamos a ubicar en una subred privada de manera que no sea accesible desde Internet.</p> <p>En una subred p\u00fablica de la VPC crearemos una m\u00e1quina virtual accesible desde Internet y que s\u00ed que podr\u00e1 acceder a la base de datos. Este ser\u00eda un modelo t\u00edpico en el que tenemos un servidor (por ejemplo un servidor web) accesible desde Internet que ataca a una base de datos no accesible desde el exterior, aumentando as\u00ed la seguridad de nuestros datos necesarios para la aplicaci\u00f3n web.</p>"},{"location":"practica05.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica05.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":"<p>1.- Eliminamos la VPC predeterminada y nos aseguramos que no hay ning\u00fan recurso creado en anteriores pr\u00e1cticas (grupos de seguridad, NAT Gateway, instancias EC2, bases de datos, ...)</p> <p></p>"},{"location":"practica05.html#creacion-de-la-vpc-y-la-maquina-ec2","title":"Creaci\u00f3n de la VPC y la m\u00e1quina EC2","text":"<p>2.- Creamos una nueva VPC con la siguientes caracter\u00edsticas:</p> <ul> <li>El bloque de CIDR ser\u00e1 10.0.0.0/16</li> <li>Debe tener 2 AZs.</li> <li>2 Subredes p\u00fablicas (10.0.1.0/24 y 10.0.2.0/24) cada una en una AZ.</li> <li>2 Subredes privadas (10.0.3.0/24 y 10.0.4.0/24) cada una en una AZ.</li> <li>No es necesario un Gateway NAT ni un Gateway de S3</li> </ul> <p>Nota</p> <p>Aunque no usemos Multi-AZ, AWS requiere al menos dos subredes privadas en diferentes AZ para RDS. Esto mejora la flexibilidad y disponibilidad, aunque la configuraci\u00f3n inicial sea simple.</p> <p></p> <p>3.- Vamos a crear una instancia EC2 en la primera subred p\u00fablica:</p> <ul> <li>La imagen ser\u00e1 la AMI de Ubuntu.</li> <li>El tama\u00f1o ser\u00e1 suficiente con un tipo de instancia t2.micro.</li> <li>El par de claves utilizaremos el del laboratorio (vockey).</li> <li>La ubicamos en la primera subred p\u00fablica (subnet-public1).</li> <li>Le asignamos una IP P\u00fablica para poder conectarnos desde Internet.</li> <li>Nos aseguramos que se crea una regla de firewall para permitir las conexiones por el puerto SSH (22).</li> <li>Para hacer que durante el primer lanzamiento de la instrancia se instale el cliente de MySQL ponemos las siguientes l\u00edneas en el apartado de Datos de usuario: <pre><code>#!/bin/bash\napt update\napt install -y  mysql-client-core-8.0\n</code></pre></li> </ul> <p></p> <p>4.- Una vez creada la instancia EC2 comprobamos su IP p\u00fablica y nos conectamos por ssh desde nuestra m\u00e1quina local para comprobar que todo funciona.</p> <p></p>"},{"location":"practica05.html#creacion-de-la-base-de-datos","title":"Creaci\u00f3n de la Base de Datos","text":"<p>El primer requisito para crear una base de datos RDS es definir un grupo de subredes de bases de datos en nuestra VPC. </p> <p>Info</p> <p>Un grupo de subredes de bases de datos es una colecci\u00f3n de subredes dentro de una VPC que RDS utiliza para desplegar instancias de bases de datos. Permite especificar en qu\u00e9 subredes y zonas de disponibilidad se pueden alojar las bases de datos. Es necesario que al menos contenga 2 AZ, por eso la necesidad de crear nuestra VPC con al menos 2 zonas de disponibilidad, aunque solamente utilicemos una.</p> <p>5.- Accedemos a la consola de RDS y creamos grupo de subredes con las 2 subredes privadas:</p> <ul> <li>Seleccionamos las 2 zonas de disponibilidad de nuestra VPC (en principio ser\u00e1n us-east-1a y us-east-1b).</li> <li>Seleccionamos las 2 subredes privadas (subnet-private1 y subnet-private2), puesto que deseamos crear nuestra base de datos dentro de una de las subredes privadas.</li> </ul> <p></p> <p></p> <p>6.- Ahora s\u00ed creamos una Base de Datos RDS:</p> <ul> <li>Seleccionamos el m\u00e9todo de creaci\u00f3n est\u00e1ndar.</li> <li>Como motor de base de datos elegimos MySQL.</li> <li>La plantilla sobre la que se va a basar ser\u00e1 la Capa gratuita (las dem\u00e1s no son aptas para el laboratorio).</li> <li>Ponemos un nombre de servidor que debe ser \u00fanico en nuestra cuenta de AWS.</li> <li>Asignamos nombre de usuario administrador y su contrase\u00f1a.</li> <li>Dejamos las opciones por defecto del tama\u00f1o de la instancia y el almacenamiento.</li> <li>En el apartado Conectividad:<ul> <li>Indicamos que vamos a conectar nuestra base de datos a una instancia EC2 y la seleccionamos en el desplegable.</li> <li>En el Grupo de subredes elegimos la existente que hemos creado en el punto anterior.</li> <li>NO permitimos el Acceso P\u00fablico a nuestra BBDD. </li> <li>Elegimos como grupo de seguridad, el existente por defecto. Nos informa que adem\u00e1s se crear\u00e1 un nuevo grupo de seguridad para conectar la instancia EC2 con la RDS.</li> </ul> </li> <li>Los dem\u00e1s campos los dejamos por defecto.</li> </ul> <p></p> <p>7.- Iniciamos sesi\u00f3n desde la m\u00e1quina ubuntu y comprobamos que podemos conectarnos a la instancia MySQL, indicando la cadena de conexi\u00f3n y el usuario que hemos definido como administrador. En el par\u00e1metro host <code>-h</code> ponemos el nombre del servidor y en el par\u00e1metro de usuario <code>-u</code> el nombre del usuario. Para que nos solicite el password indicamos el par\u00e1metro <code>-p</code>.</p> <p><code>mysql -h database-jrpm.cruqs8qiedha.us-east-1.rds.amazonaws.com -u admin -p</code></p> <p></p>"},{"location":"practica05.html#eliminacion-de-los-recursos-creados","title":"Eliminaci\u00f3n de los recursos creados","text":"<p>Una vez comprobada la conexi\u00f3n, para finalizar la pr\u00e1ctica eliminamos los recursos creados.</p> <p>8.- Desde la consola de AWS, elimina el servidor de BBDD creado para asegurarnos que no dejamos ning\u00fan recurso consumiendo cr\u00e9dito. No crees ninguna instant\u00e1nea final ni conserves las copias de seguridad.</p> <p>Atenci\u00f3n</p> <p>Si detenemos un servidor de BBDD (sin eliminarlo), AWS lo iniciar\u00e1 autom\u00e1ticamente a los 7 d\u00edas (si no lo hemos levantado nosotros de manera manual antes). Esto es peligroso, pues si olvidamos eliminar un recurso de BBDD que no utilizamos, se pondr\u00e1 en marcha autom\u00e1ticamente a los 7 d\u00edas de haberlo detenido, con el consiguiente consumo de cr\u00e9dito.</p> <p></p> <p></p> <p>9.- Desde la consola de AWS, elimina la instancia EC2. </p> <p></p> <p>10.- Desde la consola de AWS, elimina la VPC. </p> <p></p>"},{"location":"practica06.html","title":"Aplicaciones web con Elastic Beanstalk","text":""},{"location":"practica06.html#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>En esta pr\u00e1ctica vamos a desplegar una aplicaci\u00f3n web de manera totalmente gestionada mediante Elastic Beanstalk, un servicio PaaS que nos ofrece AWS para para implementar y escalar aplicaciones y servicios web. \u00danicamente hemos de encargarnos de subir el c\u00f3digo y Elastic Beanstalk administrar\u00e1 de manera autom\u00e1tica la implementaci\u00f3n, desde el aprovisionamiento de la capacidad, el equilibrio de carga y el escalado autom\u00e1tico hasta la supervisi\u00f3n del estado de la aplicaci\u00f3n.</p> <p>AWS Elastic Beanstalk admite aplicaciones web escritas en varios lenguajes y marcos populares. No necesita cambios de c\u00f3digo, o muy pocos, para pasar de la m\u00e1quina de desarrollo a la nube. Las opciones de desarrollo para implementar aplicaciones web son Java, .NET, Node.js, PHP, Ruby, Python, Go y Docker, entre otras.</p>"},{"location":"practica06.html#esquema-en-aws","title":"Esquema en AWS","text":""},{"location":"practica06.html#practica-a-realizar","title":"Pr\u00e1ctica a Realizar","text":"<p>1.- Eliminamos la VPC predeterminada y nos aseguramos que no hay ning\u00fan recurso creado en anteriores pr\u00e1cticas (grupos de seguridad, NAT Gateway, instancias EC2, bases de datos, ...)</p> <p></p>"},{"location":"practica06.html#creacion-de-la-vpc","title":"Creaci\u00f3n de la VPC","text":"<p>2.- Creamos una nueva VPC con la siguientes caracter\u00edsticas:</p> <ul> <li>Debe tener 2 AZs.</li> <li>2 Subredes p\u00fablicas, cada una en una AZ.</li> <li>No es necesario un Gateway NAT ni un Gateway de S3</li> </ul> <p>Nota</p> <p>Aunque no usemos Multi-AZ, vamos a crear 2 zonas de disponibilidad por si a\u00f1adimos una base de datos RDS en nuestra aplicaci\u00f3n. Como ya sabemos, AWS requiere al menos dos subredes privadas en diferentes AZ para RDS.</p> <p></p>"},{"location":"practica06.html#creacion-de-la-aplicacion-con-elastic-beanstalk","title":"Creaci\u00f3n de la aplicaci\u00f3n con Elastic Beanstalk","text":"<p>3.- Accede al servicio Elastic Beanstalk y Crea una aplicaci\u00f3n:</p> <ul> <li>El entorno ser\u00e1 un servidor web.</li> <li>Le asignamos un nombre, por ejemplo WebAsir</li> <li>En el tipo de plataforma sobre la que va a correr nuestra aplicaci\u00f3n seleccionamos PHP, puesto que ser\u00e1 una aplicaci\u00f3n web que correr\u00e1 en ese entorno de programaci\u00f3n.</li> <li>En el c\u00f3digo de la aplicaci\u00f3n dejamos de momento la Aplicaci\u00f3n de ejemplo.</li> <li>Necesitamos especificar un Rol de acceso al servicio. Seleccionamos el existente del laboratorio LabRole.</li> <li>En el par de claves necesario para la m\u00e1quina sobre la que correr\u00e1 seleccionamos tambi\u00e9n el del laboratorio vockey.</li> <li>En el perfil de instancia de EC2, seleccionamos LabInstanceProfile.</li> <li>La VPC ser\u00e1 la creada en el paso anterior.</li> <li>En el apartado subredes de instancia seleccionamos las 2 subredes creadas.</li> <li>Los dem\u00e1s campos los dejamos sin marcar (no creamos ninguna BBDD ni asignamos IP P\u00fablica)</li> </ul> <p>Nota</p> <p>Podr\u00edamos haber creado aqu\u00ed una Base de Datos que se conecte a la aplicaci\u00f3n, pero no lo hacemos en este momento. Veremos c\u00f3mo conectar m\u00e1s tarde una BBDD que ya est\u00e9 creada.</p> <p></p>"},{"location":"practica06.html#comprobacion-del-funcionamiento","title":"Comprobaci\u00f3n del funcionamiento","text":"<p>4.- Una vez lanzado el entorno correctamente y cuando su estado aparezca Ok, comprobamos su Dominio y lo abrimos en el navegador (simplemente haciendo click encima) para comprobar que todo funciona. Nos debe aparecer una web con el c\u00f3digo de ejemplo en la que aparece Congratulations!</p> <p></p> <p></p>"},{"location":"practica06.html#carga-de-nuestro-codigo","title":"Carga de nuestro c\u00f3digo","text":"<p>Esel momento de cargar un c\u00f3digo propio a nuestra aplicaci\u00f3n de Beanstalk. Vamos a utilizar en esta pr\u00e1ctica un c\u00f3digo HTML + PHP que se encuentra en el repositorio https://github.com/jrpellicer/asirweb</p> <p>5.- Accedemos al repositorio de GitHub y en el bot\u00f3n de <code>Code</code> pulsamos sobre Download ZIP</p> <p>Atenci\u00f3n</p> <p>Para subir la aplicaci\u00f3n a Beanstalk necesitamos un fichero <code>.zip</code> (o un fichero <code>.tar.gz</code>) pero no nos vale el que acabamos de descargar. El descargado contiene una carpeta con los archivos de la p\u00e1gina web en ella, pero Beanstalk necesita que los archivos est\u00e9n en la ra\u00edz del fichero <code>.zip</code> (sin carpeta).</p> <p></p> <p>6.- Una vez descargado el c\u00f3digo vamos a descomprimir el archivo para despu\u00e9s volver a comprimirlo, pero sin incluir los archivos en ninguna carpeta comprimida.</p> WindowsLinux <ol> <li>Extrae el ZIP en una carpeta.</li> <li>Selecciona los archivos dentro de la carpeta extra\u00edda.</li> <li>Haz clic derecho y elige \"Enviar a &gt; Carpeta comprimida\".</li> </ol> <ol> <li>Sit\u00faate en la carpeta donde se ha descargado el archivo.</li> <li>Descomprime el archivo: <code>unzip asirweb-main.zip</code></li> <li>Sit\u00faate en el directorio creado al descomprimir: <code>cd asirweb-main</code></li> <li>Vuelve a comprimir seleccionando todos los ficheros: <code>zip -r ../codigo.zip *</code></li> <li>Nos ha dejado en el directorio padre un fichero llamado codigo.zip listo para ser subido.</li> </ol> <p></p> <p>7.- Volvemos a la consola de AWS y en la pantalla de nuestro Entorno de la aplicaci\u00f3n de Beanstalk pulsamos sobre el bot\u00f3n Cargar e implementar.</p> <p></p> <p></p> <p>8.- Subimos el archivo <code>.zip</code> con nuestro c\u00f3digo generado en el paso anterior e implementamos.</p> <p>Esperamos a que se actualice el entorno y accedemos al dominio web para comprobar los cambios.</p> <p></p>"},{"location":"practica06.html#conexion-a-una-bbdd","title":"Conexi\u00f3n a una BBDD","text":"<p>Es bastante probable que en nuestros proyectos web deseemos conectar una base de datos para interactuar con ella. Si accedemos a nuestra p\u00e1gina web cargada, veremos que hay un bot\u00f3n que pone <code>Ver Listado</code> que da error al pulsarlo, pues ejecuta un c\u00f3digo PHP que se conecta a una base de datos que no existe.</p> <p>El primer paso ser\u00e1 crear una BBDD RDS.</p> <p>6.- Accedemos a la consola de RDS y creamos una Base de Datos:</p> <ul> <li>Seleccionamos el m\u00e9todo de creaci\u00f3n est\u00e1ndar.</li> <li>Como motor de base de datos elegimos MySQL.</li> <li>La plantilla sobre la que se va a basar ser\u00e1 la Capa gratuita (las dem\u00e1s no son aptas para el laboratorio).</li> <li>Ponemos un nombre de servidor que debe ser \u00fanico en nuestra cuenta de AWS.</li> <li>Asignamos nombre de usuario administrador y su contrase\u00f1a.</li> <li>Dejamos las opciones por defecto del tama\u00f1o de la instancia y el almacenamiento.</li> <li>En el apartado Conectividad:<ul> <li>Seleccionamos la VPC en la que est\u00e1 ubicado nuestro proyecto de Beanstalk.</li> <li>Permitimos el Acceso P\u00fablico a nuestra BBDD (para poder conectarnos desde nuestra m\u00e1quina local y cargar datos).</li> <li>Elegimos como grupo de seguridad, el existente por defecto. </li> </ul> </li> <li>Los dem\u00e1s campos los dejamos por defecto.</li> </ul> <p></p> <p>7.- Accedemos al Grupo de seguridad asociado a la base de datos y editamos las reglas de entrada para permitir el acceso al puerto MYSQL/Aurora (3306) desde todas las direcciones (0.0.0.0/0)</p> <p></p> <p>8.- En nuestra m\u00e1quina local nos conectamos a la base de datos mediante el comando <code>mysql</code> y comprobamos la conexi\u00f3n.</p> <p></p> <p>9.- Vamos a crear una base de datos con una tabla. Lo vamos a hacer mediante un script de sentencias sql. Para ello comenzamos con la descarga del fichero de creaci\u00f3n de la base de datos.</p> LinuxWindows <pre><code>wget https://raw.githubusercontent.com/jrpellicer/awsasir/refs/heads/main/docs/asir.sql\n</code></pre> <p>Descarga fichero sql</p> <p></p> <p>8.- Ejecutamos las instrucciones SQL que hay en el contenido del fichero descargado. Basta con redireccionar la entrada del comando <code>mysql</code> con el fichero descargado de nombre <code>asir.sql</code>.</p> <pre><code>mysql -h database-jrpm.cruqs8qiedha.us-east-1.rds.amazonaws.com -u admin -p &lt; asir.sql\n</code></pre> <p>Atenci\u00f3n</p> <p>Una vez creadas las tablas y los datos de la base de datos, podr\u00edamos modificar las reglas de entrada del grupo de seguridad para eliminar el acceso desde Internet al puerto 3306.</p> <p></p> <p>Una vez creada la base de datos, vamos a enlazarla con la aplicaci\u00f3n de Beanstalk mediante el paso de variables de entorno con los datos de la base de datos que acabamos de crear (Host, Puerto, Usuario, Contrase\u00f1a y Nombre de la BD).</p> <p>9.- Accedemos a la consola de Beanstalk y seleccionamos nuestro entorno.</p> <p></p> <p>10.- En el panel de navegaci\u00f3n seleccionamos Configuraci\u00f3n:</p> <ul> <li>En la categor\u00eda de configuraci\u00f3n Actualizaciones, monitoreo y registro, seleccionamos Editar.</li> <li>En la secci\u00f3n Propiedades del entorno (la \u00faltima) definimos las variables (propiedades) que leer\u00e1 la aplicaci\u00f3n para crear la cadena de conexi\u00f3n. Hay que mantener los nombres y poner su correspondiente valor:<ul> <li>RDS_HOSTNAME</li> <li>RDS_PORT</li> <li>RDS_DB_NAME</li> <li>RDS_USERNAME</li> <li>RDS_PASSWORD</li> </ul> </li> </ul> <p>Nota</p> <p>El valor de cada variable ser\u00e1 el definido en la base de datos RDS que hemos creado. RDS_HOSTNAME ser\u00e1 la cadena de conexi\u00f3n. RDS_PORT ser\u00e1 el 3306, RDS_DB_NAME ser\u00e1 webasir (se ha creado en el script) y los dem\u00e1s datos ser\u00e1n los que hayamos definido en el momento de la creaci\u00f3n.</p> <p></p> <p></p>"},{"location":"practica06.html#modificacion-del-codigo","title":"Modificaci\u00f3n del c\u00f3digo","text":"<p>Una vez definidas las variables de entorno con sus valores es momento de utilizarlas en la p\u00e1gina listado.php.</p> <p>11.- En la m\u00e1quina local nos situamos en el directorio donde hab\u00edamos descomprimido el c\u00f3digo fuente de nuestra aplicaci\u00f3n y con un editor accedemos al fichero <code>listado.php</code>.</p> <p></p> <p>12.- Modificamos las l\u00edneas del c\u00f3digo de las variables de conexi\u00f3n para que utilicen las variables de entorno creadas:</p> <p></p> <p></p> <p>13.- Volvemos a crear el archivo zip y lo subimos al entorno.</p> <p></p> <p>14.- Comprobamos que la aplicaci\u00f3n accede a la base de datos y ya funciona el listado.</p>"},{"location":"practica06.html#eliminacion-de-los-recursos-creados","title":"Eliminaci\u00f3n de los recursos creados","text":"<p>Una vez comprobada la conexi\u00f3n, para finalizar la pr\u00e1ctica eliminamos los recursos creados.</p> <p>8.- Desde la consola de AWS, elimina el servidor de BBDD creado para asegurarnos que no dejamos ning\u00fan recurso consumiendo cr\u00e9dito. No crees ninguna instant\u00e1nea final ni conserves las copias de seguridad.</p> <p>Atenci\u00f3n</p> <p>Si detenemos un servidor de BBDD (sin eliminarlo), AWS lo iniciar\u00e1 autom\u00e1ticamente a los 7 d\u00edas (si no lo hemos levantado nosotros de manera manual antes). Esto es peligroso, pues si olvidamos eliminar un recurso de BBDD que no utilizamos, se pondr\u00e1 en marcha autom\u00e1ticamente a los 7 d\u00edas de haberlo detenido, con el consiguiente consumo de cr\u00e9dito.</p> <p></p> <p></p> <p>9.- Desde la consola de AWS, elimina la aplicaci\u00f3n de Elastic Beanstalk. </p> <p>Al eliminar la aplicaci\u00f3n se terminar\u00e1 el entorno sobre el que corre.</p> <p></p> <p>10.- Desde la consola de AWS, elimina la VPC. </p> <p></p>"}]}